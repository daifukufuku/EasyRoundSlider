'use strict';

// When there are multiple sliders, holds the ID of the round slider 
var targetRoundSliderId = "";

// Whether you are moving the handle
var isHandleMoving = false;

// Initializing slider
function InitializeRoundSlider(params) {
    var tmpRoundSliderId = "";
    var tmpRoundSliderRadius = 100;
    var tmpRoundSliderBorderWidth = 0;
    var tmpRoundSliderBorderColor = "#000";
    var tmpRoundSliderHandleColor = "";
    var tmpRoundSliderHandleSize = 0;

    // ID
    if (params["id"]) {
        tmpRoundSliderId = "#" + params["id"];

        // append handle
        $(tmpRoundSliderId).append('<div id="result-handle"></div>');
        $(tmpRoundSliderId).append('<div id="drag-handle"></div>');
    } else {
        return;
    }

    // Radius
    if (params["radius"]) {
        tmpRoundSliderRadius = params["radius"];
        $(tmpRoundSliderId).attr("radius", params["radius"]);
    }
    $(tmpRoundSliderId).width(tmpRoundSliderRadius * 2);
    $(tmpRoundSliderId).height(tmpRoundSliderRadius * 2);

    // Width
    if (params["borderWidth"]) {
        tmpRoundSliderBorderWidth = params["borderWidth"];
        $(tmpRoundSliderId).attr("border-width", params["borderWidth"]);
    }

    // Border color
    if (params["borderColor"]) {
        tmpRoundSliderBorderColor = params["borderColor"];
        $(tmpRoundSliderId).attr("border-color", params["borderColor"]);
    }

    // Handle size
    if (params["handleSize"]) {
        tmpRoundSliderHandleSize = params["handleSize"];
        $(tmpRoundSliderId).attr("handle-size", params["handleSize"]);

    }

    // Handle color
    if (params["handleColor"]) {
        tmpRoundSliderHandleColor = params["handleColor"];
        $(tmpRoundSliderId).attr("handle-color", params["handleColor"]);
    }

    $(tmpRoundSliderId).css("border", "solid " + tmpRoundSliderBorderWidth + "px " + tmpRoundSliderBorderColor);
    $(tmpRoundSliderId).css("overflow", "visible");
    $(tmpRoundSliderId).css("position", "relative");

    // Drag handle
    $(tmpRoundSliderId + " > #drag-handle").css("width", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #drag-handle").css("height", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #drag-handle").css("left", -1 * tmpRoundSliderHandleSize / 2 + "px");
    $(tmpRoundSliderId + " > #drag-handle").css("top", $(tmpRoundSliderId).height() / 2 - tmpRoundSliderHandleSize / 2 + "px");
    $(tmpRoundSliderId + " > #drag-handle").css("position", "absolute");
    $(tmpRoundSliderId + " > #drag-handle").css("background-color", tmpRoundSliderHandleColor);
    $(tmpRoundSliderId + " > #drag-handle").css("border-radius", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #drag-handle").attr("round-slider-id", params["id"]);
    $(tmpRoundSliderId).css("border-radius", tmpRoundSliderRadius + "px");

    // hide drag handle
    $(tmpRoundSliderId + " > #drag-handle").css("opacity", "0");

    // ResultHandle
    $(tmpRoundSliderId + " > #result-handle").css("width", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #result-handle").css("height", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #result-handle").css("position", "absolute");
    $(tmpRoundSliderId + " > #result-handle").css("background-color", tmpRoundSliderHandleColor);
    $(tmpRoundSliderId + " > #result-handle").css("border-radius", tmpRoundSliderHandleSize + "px");
    $(tmpRoundSliderId + " > #result-handle").css("left", -1 * tmpRoundSliderHandleSize / 2 + "px");
    $(tmpRoundSliderId + " > #result-handle").css("top", $(tmpRoundSliderId).height() / 2 - tmpRoundSliderHandleSize / 2 + "px");

    // Mousedown event
    $(tmpRoundSliderId + " > #drag-handle").on("mousedown", function (e) {

        targetRoundSliderId = "#" + $(this).attr("round-slider-id");

        if (isHandleMoving) return; // Ignore while moving

        isHandleMoving = true; // Update handle status to moving

        // click enter position (screen)
        const mouseDownScreenX = e.screenX;
        const mouseDownScreenY = e.screenY;

        $(targetRoundSliderId).attr("mouse-down-screen-x", mouseDownScreenX);
        $(targetRoundSliderId).attr("mouse-down-screen-y", mouseDownScreenY);

        // click enter position (absolute position to parent)
        const startAbsPosX = $(targetRoundSliderId + " > #drag-handle").position().left;
        const startAbsPosY = $(targetRoundSliderId + " > #drag-handle").position().top;

        $(targetRoundSliderId).attr("mouse-down-abs-x", startAbsPosX);
        $(targetRoundSliderId).attr("mouse-down-abs-y", startAbsPosY);
    });

    // Mousemove event
    $(window).on("mousemove", function (e) {
        // Process only while moving
        if (isHandleMoving == false) {
            return;
        }

        const mouseDownScreenX = parseInt($(targetRoundSliderId).attr("mouse-down-screen-x"));
        const mouseDownScreenY = parseInt($(targetRoundSliderId).attr("mouse-down-screen-y"));

        const startAbsPosX = parseInt($(targetRoundSliderId).attr("mouse-down-abs-x"));
        const startAbsPosY = parseInt($(targetRoundSliderId).attr("mouse-down-abs-y"));

        // Add the attr moved to the clicked element's coordinates and set this as the new position
        $(targetRoundSliderId + " > #drag-handle").css("left", (startAbsPosX + e.screenX - mouseDownScreenX) + "px");
        $(targetRoundSliderId + " > #drag-handle").css("top", (startAbsPosY + e.screenY - mouseDownScreenY) + "px");

        // Drag Handle size
        const containerWidth = $(targetRoundSliderId).width();

        // Drag handle Position
        const centerPosX = containerWidth / 2 - $(targetRoundSliderId).attr("handle-size") / 2;
        const centerPosY = $(targetRoundSliderId).height() / 2 - $(targetRoundSliderId).attr("handle-size") / 2;

        const handlePosX = $(targetRoundSliderId + " > #drag-handle").position().left;
        const handlePosY = $(targetRoundSliderId + " > #drag-handle").position().top;

        const distanceCenterToDragHandle = Math.sqrt(Math.pow(handlePosX - centerPosX, 2) + Math.pow(handlePosY - centerPosY, 2));

        // Sin and cos value of drag handle
        const sinValue = (handlePosY - centerPosY) / distanceCenterToDragHandle;
        const cosValue = (handlePosX - centerPosX) / distanceCenterToDragHandle;

        // Result handle position
        const resultHandlePosX = centerPosX + $(targetRoundSliderId).attr("radius") * cosValue;
        const resultHandlePosY = centerPosY + $(targetRoundSliderId).attr("radius") * sinValue;

        $(targetRoundSliderId).attr("result-handle-pos-x", resultHandlePosX)
        $(targetRoundSliderId).attr("result-handle-pos-y", resultHandlePosY)

        $(targetRoundSliderId + " > #result-handle").css("left", resultHandlePosX + "px");
        $(targetRoundSliderId + " > #result-handle").css("top", resultHandlePosY + "px");

        // Result of radian value
        const resultRadianValue = Math.atan2(resultHandlePosY - centerPosY, resultHandlePosX - centerPosX);

        // Rate
        const resultRateValue = (resultRadianValue + Math.PI) / (Math.PI * 2);

        // Update attibute value to dom
        $(targetRoundSliderId + " > #result-handle").attr("result-handle-pos-x", resultHandlePosX);
        $(targetRoundSliderId + " > #result-handle").attr("result-handle-pos-y", resultHandlePosY);
        $(targetRoundSliderId + " > #result-handle").attr("result-rate-value", resultRateValue);

        if (typeof roundSliderOnValueChanged == 'function') {
            // Calling event
            roundSliderOnValueChanged($(targetRoundSliderId), resultRateValue);
        }
    });

    // Mouseup event
    $(window).on("mouseup", function (e) {
        if (isHandleMoving == false) return;
        didfinishMoveDragHandle();
    });

    $(window).on("click contextmenu", function (e) {
        if (e.which == 3) {
            // Right click handler
            didfinishMoveDragHandle();
        }
    });

    function didfinishMoveDragHandle() {
        isHandleMoving = false;

        const resultHandlePosX = $(targetRoundSliderId).attr("result-handle-pos-x");
        const resultHandlePosY = $(targetRoundSliderId).attr("result-handle-pos-y");

        $(targetRoundSliderId + " > #drag-handle").css("left", resultHandlePosX + "px");
        $(targetRoundSliderId + " > #drag-handle").css("top", resultHandlePosY + "px");
    }

}

// Event after value changing 
function updateRoundSliderValue(targetRoundSliderId, resultRateValue) {
    var radius = parseInt($(targetRoundSliderId).attr("radius"));
    var handleSize = parseInt($(targetRoundSliderId).attr("handle-size"));
    var centerPosX = $(targetRoundSliderId).width() / 2 - handleSize / 2;
    var centerPosY = $(targetRoundSliderId).height() / 2 - handleSize / 2;

    var mouseDownScreenX = 0;
    var mouseDownScreenY = 0;

    var radian = resultRateValue * Math.PI * 2 - Math.PI;

    var resultHandlePosX = centerPosX + radius * Math.cos(radian);
    var resultHandlePosY = centerPosY + radius * Math.sin(radian);

    $(targetRoundSliderId + " > #drag-handle").css("left", resultHandlePosX + "px");
    $(targetRoundSliderId + " > #drag-handle").css("top", resultHandlePosY + "px");

    $(targetRoundSliderId + " > #result-handle").css("left", resultHandlePosX + "px");
    $(targetRoundSliderId + " > #result-handle").css("top", resultHandlePosY + "px");

    $(targetRoundSliderId).attr("mouse-down-screen-x", mouseDownScreenX);
    $(targetRoundSliderId).attr("mouse-down-screen-y", mouseDownScreenY);
    $(targetRoundSliderId).attr("mouse-down-abs-x", resultHandlePosX);
    $(targetRoundSliderId).attr("mouse-down-abs-y", resultHandlePosY);

    roundSliderOnValueChanged($(targetRoundSliderId), resultRateValue);

}